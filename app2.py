import streamlit as st
import os
import json
import sqlite3
from memory_processor import MemoriaChatProcessor

# Inicializa√ß√£o das estruturas
os.makedirs("db", exist_ok=True)
os.makedirs("memorias", exist_ok=True)
os.makedirs("templates", exist_ok=True)

DB_PATH = "db/jesus_chat_memorias.sqlite"

st.set_page_config(page_title="Jesus Chat Mem√≥rias", layout="wide")
st.title("‚úùÔ∏è Interface Central - Jesus Chat Mem√≥rias")
st.write("Gerencie, visualize e explore suas mem√≥rias espirituais em um s√≥ lugar.")

# Navega√ß√£o principal
aba = st.sidebar.radio("üìÇ Menu Principal", ["In√≠cio", "Processar JSON", "Mem√≥rias", "Clusters", "Entidades", "Grafo Sem√¢ntico", "M√©tricas"])

if aba == "In√≠cio":
    st.header("üìú Introdu√ß√£o")
    st.markdown("""
    Esta plataforma permite:
    - Enviar conversas em JSON
    - Gerar resumos e m√©tricas
    - Visualizar mem√≥rias j√° salvas
    - Navegar por entidades e clusters
    - Ver a estrutura sem√¢ntica da conversa
    """)

elif aba == "Processar JSON":
    st.header("üì§ Enviar JSON da Conversa")
    file = st.file_uploader("Escolha o arquivo .json", type=["json"])
    if file:
        try:
            data = json.load(file)
            processor = MemoriaChatProcessor()
            result = processor.process_template(data)
            st.success("Mem√≥ria processada!")

            st.subheader("üß† Resumo")
            st.markdown(result['summary']['brief'])

            st.subheader("üî¢ M√©tricas")
            for k, v in result['metrics'].items():
                st.text(f"{k.replace('_', ' ').capitalize()}: {v:.2f}")

            st.download_button("‚¨áÔ∏è Baixar HTML", data=result["html_view"], file_name="memoria.html")

        except Exception as e:
            st.error(f"Erro: {e}")

elif aba == "Mem√≥rias":
    st.header("üìÅ Mem√≥rias Geradas")
    htmls = [f for f in os.listdir("memorias") if f.endswith(".html")]
    if not htmls:
        st.warning("Nenhuma mem√≥ria encontrada.")
    for file in htmls:
        st.markdown(f"- [{file}](memorias/{file})")

elif aba == "Clusters":
    st.header("üî∑ Clusters de T√≥picos")
    if os.path.exists(DB_PATH):
        conn = sqlite3.connect(DB_PATH)
        clusters = conn.execute("SELECT id, name, keywords, importance FROM topic_clusters").fetchall()
        for c in clusters:
            st.markdown(f"**{c[1]}** ‚Äî *Import√¢ncia:* {c[3]:.2f}<br>Palavras-chave: `{c[2]}`", unsafe_allow_html=True)
        conn.close()
    else:
        st.info("Banco de dados n√£o encontrado.")

elif aba == "Entidades":
    st.header("üß¨ Entidades Detectadas")
    if os.path.exists(DB_PATH):
        conn = sqlite3.connect(DB_PATH)
        entities = conn.execute("SELECT name, type, mentions FROM entities ORDER BY mentions DESC").fetchall()
        for e in entities:
            st.markdown(f"- **{e[0]}** (*{e[1]}*) ‚Äî {e[2]} ocorr√™ncia(s)")
        conn.close()
    else:
        st.info("Banco n√£o dispon√≠vel.")

elif aba == "Grafo Sem√¢ntico":
    st.header("üï∏Ô∏è Estrutura de Conceitos (N√≥s e Liga√ß√µes)")
    if os.path.exists(DB_PATH):
        conn = sqlite3.connect(DB_PATH)
        nodes = conn.execute("SELECT id, label, type FROM nodes").fetchall()
        edges = conn.execute("SELECT source, target, relationship FROM edges").fetchall()
        st.markdown("**N√≥s**")
        for n in nodes:
            st.markdown(f"- `{n[0]}`: {n[1]} ({n[2]})")
        st.markdown("**Liga√ß√µes**")
        for e in edges:
            st.markdown(f"- {e[0]} ‚Üí {e[1]} : *{e[2]}*")
        conn.close()
    else:
        st.warning("Banco de dados ausente.")

elif aba == "M√©tricas":
    st.header("üìä M√©tricas Consolidadas")
    if os.path.exists(DB_PATH):
        conn = sqlite3.connect(DB_PATH)
        met = conn.execute("SELECT * FROM metrics").fetchall()
        for row in met:
            st.markdown(f"- Chat `{row[0]}`: Resolu√ß√£o={row[1]:.2f}, Precis√£o={row[2]:.2f}, Completude={row[3]:.2f}, Efici√™ncia={row[4]:.2f}")
        conn.close()
    else:
        st.warning("Banco de dados n√£o carregado.")
